import React, { Component } from 'react';
import FaStepForward from 'react-icons/lib/fa/step-forward';
import FaHeart from 'react-icons/lib/fa/heart';
import logo from './logo.svg';
import './App.css';

class CVEEntry {
  constructor(element) {
    this.title = element.children.item(0).textContent;
    this.link = element.children.item(1).textContent;
    this.description = element.children.item(2).textContent;
    this.date = element.children.item(3).textContent;
  }

  category() {
    const categoryRegex = /\((.+)\)/;
    const match = this.title.match(categoryRegex);
    if (match && match.length > 1) {
      return match[1];
    }
    return "uncategorized";
  }
}

// `tag` structure
// {selected: bool, title: string, items: []}
class FilterComponent extends Component {
  state = {
    tags: {
      "uncategorized": {
        selected: true,
        items: [],
      }
    }
  }

  confirmFilter() {
    let results = [];
    Object.keys(this.state.tags)
      .forEach((key) => {
      let tag = this.state.tags[key];
      if (tag.selected) {
        results = results.concat(tag.items)
      }
    });
    this.props.onFilter(results);
  }

  componentWillReceiveProps(nextProps) {
    let tags = this.state.tags;
    nextProps.items.forEach((item, i) => {
      let category = item.category();
      let tag = tags[category];
      if (tag) {
        tag.items.push(item);
      } else {
        tags[category] = {
          items: [item],
          selected: true,
        };
      }
    });
    this.setState({tags});
  }

  toggleSelected(key) {
    let tags = this.state.tags;
    tags[key].selected = !tags[key].selected;
    this.setState({tags});
  }

  render() {
    return (
      <div className="filter">
        <div className="filter-header">
          Deselect items you <em>know</em> you aren't interested in. Everything is selected (green) by default.
        </div>
        {
          Object.keys(this.state.tags)
            .sort((a, b) => this.state.tags[a].items.length - this.state.tags[b].items.length)
            .reverse()
            .map((key) => {
            let tag = this.state.tags[key];
            let className = "filter-item";
            if (tag.selected) {
              className += " selected";
            }
            return (
              <div className={className} key={key} onClick={() => this.toggleSelected(key)}>
                <div className="category-title">
                  {key} 
                </div>
                <div>
                  {tag.items.length} items
                </div>
              </div>
            )
          })
        }
        <div className="filter-actions">
          <button type="button" onClick={() => this.confirmFilter()}>
            Confirm Filter
          </button>
        </div>
      </div>
    );
  }
}

class EntryComponent extends Component {
  renderToolbar() {
    if (this.props.hideToolbar) {
      return null;
    }
    return (
      <div className="toolbar">
        <div className="icon-wrapper" onClick={() => this.props.onSave(this.props.entry)}>
          <FaHeart size={30} />
        </div>
        <div className="icon-wrapper" onClick={() => this.props.onSkip(this.props.entry)}>
          <FaStepForward size={30} />
        </div>        
      </div>
    )
  }
  render() {
    return (
      <div className="entry">
        <div className="title">{this.props.entry.title}</div>
        <div className="content">
          <div className="description">{this.props.entry.description}</div>
          <div className="link">{this.props.entry.link}</div>
          <div className="date">{this.props.entry.date}</div>
        </div>
        {this.renderToolbar()}
      </div>
    );
  }
}

class ProgressComponent extends Component {
  render() {
    let progress = 1;
    let current = this.props.current >= 0 ? this.props.current + 1 : 0;
    let count = this.props.count || 0;
    let saved = this.props.saved || 0;
    let skipped = this.props.skipped || 0;

    if (count > 0) {
      progress = Math.min(Math.max(1, (current / count) * 100), 100);
    }
    return (
      <div className="progress">
        <div className="outer-bar">
          <div className="inner-bar" style={{width: `${progress}%`}}/>
        </div>
        <div className="status">
          {current} of {count} &middot; {saved} saved &middot; {skipped} skipped &middot;
          <span onClick={this.props.onToggle}> Toggle Results</span>
        </div>
      </div>
    )
  }
}


function fetchCVEs() {
  return fetch('/download/nvd-rss.xml', {
    mode: 'no-cors'
  }).then(function(response){
    return response.text();
  }).then(function(resText) {
    let parser = new DOMParser()
    let document = parser.parseFromString(resText, 'text/xml')
    let items = document.getElementsByTagName('item');
    return Array.from(items);
  }).then(function(rawItems) {
    return rawItems.map(function(rawItem) {
      return new CVEEntry(rawItem);
    });
  });
}

class App extends Component {
  state = {
    items: [],
    filteredItems: [],
    current: -1,
    interested: [],
    notInterested: [],
    displayResults: false,
    filterConfirmed: false,
  }

  componentDidMount() {
    this._selfDiv.focus()
    fetchCVEs().then((items) => {
      if (items.length > 0) {
        this.setState({
          items,
          current: 0,
          interested: [],
          notInterested: [],
          filteredItems: [],
          displayResults: false,
          filterConfirmed: false,
        });
      }
    });
  }

  renderSavedList() {
    return this.state.interested.map(function(item) {
      return (
        <EntryComponent key={item.title} entry={item} hideToolbar/>
      );
    });
  }

  renderFilter() {
    return <FilterComponent items={this.state.items} onFilter={(filteredItems) => this.setState({filteredItems, filterConfirmed: true})} />
  }

  renderNone() {
    return <div>There are no more things</div>;
  }

  renderDone() {
    return <div>You got through all the things!</div>;
  }

  onSave = (entry) => {
    let newState = {
      current: this.state.current + 1,
      interested: [...this.state.interested, entry]
    };
    this.setState(newState);
  }

  onSkip = (entry) => {
    let newState = {
      current: this.state.current + 1,
      notInterested: [...this.state.notInterested, entry]
    };
    this.setState(newState);
  }

  onGoBack = () => {
    let newCurrent = Math.max(0, this.state.current - 1);
    let item = this.state.filteredItems[newCurrent];
    this.setState({
      current: newCurrent,
      notInterested: this.state.notInterested.filter((i) => i.link !== item.link),
      interested: this.state.interested.filter((i) => i.link !== item.link),
    });
  }

  renderResults() {
    return (
      <div>
        <h2>
          Results
        </h2>
        {this.renderSavedList()}
      </div>
    )
  }

  renderCurrent() {
    if (this.state.displayResults) {
      return this.renderResults();
    }

    if (this.state.filterConfirmed === false) {
      return this.renderFilter();
    }

    if (this.state.filteredItems.length === 0) {
      return this.renderNone()
    }

    if (this.state.current >= this.state.filteredItems.length) {
      return this.renderResults()
    }

    let current = this.state.filteredItems[this.state.current];
    return <EntryComponent
              onSave={this.onSave}
              onSkip={this.onSkip}
              entry={current}
            />
  }

  onKeyPress = (event) => {
    let current = this.state.filteredItems[this.state.current];
    if (event.keyCode === 32 || event.key === 'ArrowRight') {
      //Skip
      this.onSkip(current);
    } else if (['ArrowLeft', 'Enter', 'Control'].includes(event.key)) {
      //Save
      this.onSave(current);
    } else if (['Escape', 'ArrowUp'].includes(event.key)) {
      this.onGoBack()
    }
  }

  render() {
    return (
      <div ref={(r) => this._selfDiv = r} className="App" tabIndex="0" onKeyUp={this.onKeyPress}>
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
        </header>
        { this.renderCurrent() }
        <ProgressComponent
          count={this.state.filteredItems.length}
          current={this.state.current}
          saved={this.state.interested.length}
          skipped={this.state.notInterested.length}
          onToggle={() => this.setState({displayResults: !this.state.displayResults})}
          />
      </div>
    );
  }
}

export default App;
