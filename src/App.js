import React, { Component } from 'react';
import FaStepForward from 'react-icons/lib/fa/step-forward';
import FaHeart from 'react-icons/lib/fa/heart';
import logo from './logo.svg';
import './App.css';

class CVEEntry {
  constructor(element) {
    this.title = element.children.item(0).textContent;
    this.link = element.children.item(1).textContent;
    this.description = element.children.item(2).textContent;
    this.date = element.children.item(3).textContent;
  }
}

class EntryComponent extends Component {
  render() {
    return (
      <div className="entry">
        <div className="title">{this.props.entry.title}</div>
        <div className="content">
          <div className="description">{this.props.entry.description}</div>
          <div className="link">{this.props.entry.link}</div>
          <div className="date">{this.props.entry.date}</div>
        </div>
        <div className="toolbar">
          <div className="icon-wrapper" onClick={() => this.props.onSave(this.props.entry)}>
            <FaHeart size={30} />
          </div>
          <div className="icon-wrapper" onClick={() => this.props.onSkip(this.props.entry)}>
            <FaStepForward size={30} />
          </div>        
        </div>
      </div>
    );
  }
}

class ProgressComponent extends Component {
  render() {
    let progress = 1;
    let current = this.props.current >= 0 ? this.props.current + 1 : 0;
    let count = this.props.count || 0;
    let saved = this.props.saved || 0;
    let skipped = this.props.skipped || 0;

    if (count > 0) {
      progress = Math.min(Math.max(1, (current / count) * 100), 100);
    }
    return (
      <div className="progress">
        <div className="outer-bar">
          <div className="inner-bar" style={{width: `${progress}%`}}/>
        </div>
        <div className="status">
          {current} of {count} &middot; {saved} saved &middot; {skipped} skipped
        </div>
      </div>
    )
  }
}


function fetchCVEs() {
  return fetch('/download/nvd-rss.xml', {
    mode: 'no-cors'
  }).then(function(response){
    return response.text();
  }).then(function(resText) {
    let parser = new DOMParser()
    let document = parser.parseFromString(resText, 'text/xml')
    let items = document.getElementsByTagName('item');
    return Array.from(items);
  }).then(function(rawItems) {
    return rawItems.map(function(rawItem) {
      return new CVEEntry(rawItem);
    });
  });
}

class App extends Component {
  state = {
    items: [],
    current: -1,
    interested: [],
    notInterested: []
  }

  componentDidMount() {
    this._selfDiv.focus()
    fetchCVEs().then((items) => {
      if (items.length > 0) {
        this.setState({items, current: 0, interested: [], notInterested: 0});
      }
    });
  }

  renderList() {
    return this.state.items.map(function(item) {
      return (
        <EntryComponent key={item.title} entry={item} />
      );
    });
  }

  renderNone() {
    return <div>There are no more things</div>;
  }

  renderDone() {
    return <div>You got through all the things!</div>;
  }

  onSave = (entry) => {
    let newState = {
      current: this.state.current + 1,
      interested: [...this.state.interested, entry]
    };
    this.setState(newState);
  }

  onSkip = (entry) => {
    let newState = {
      current: this.state.current + 1,
      notInterested: [...this.state.notInterested, entry]
    };
    this.setState(newState);
  }

  onGoBack = () => {
    let newCurrent = Math.max(0, this.state.current - 1);
    let item = this.state.items[newCurrent];
    this.setState({
      current: newCurrent,
      notInterested: this.state.notInterested.filter((i) => i.link !== item.link),
      interested: this.state.interested.filter((i) => i.link !== item.link),
    });
  }

  renderCurrent() {
    if (this.state.items.length === 0) {
      return this.renderNone()
    }

    if (this.state.current >= this.state.items.length) {
      return this.renderDone()
    }

    let current = this.state.items[this.state.current];
    return <EntryComponent
              onSave={this.onSave}
              onSkip={this.onSkip}
              entry={current}
            />
  }

  onKeyPress = (event) => {
    let current = this.state.items[this.state.current];
    if (event.keyCode === 32 || event.key === 'ArrowRight') {
      //Skip
      this.onSkip(current);
    } else if (['ArrowLeft', 'Enter', 'Control'].includes(event.key)) {
      //Save
      this.onSave(current);
    } else if (['Escape', 'ArrowUp'].includes(event.key)) {
      this.onGoBack()
    }
  }

  render() {
    return (
      <div ref={(r) => this._selfDiv = r} className="App" tabIndex="0" onKeyUp={this.onKeyPress}>
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
        </header>
        { this.renderCurrent() }
        <ProgressComponent
          count={this.state.items.length}
          current={this.state.current}
          saved={this.state.interested.length}
          skipped={this.state.notInterested.length}
          />
      </div>
    );
  }
}

export default App;
